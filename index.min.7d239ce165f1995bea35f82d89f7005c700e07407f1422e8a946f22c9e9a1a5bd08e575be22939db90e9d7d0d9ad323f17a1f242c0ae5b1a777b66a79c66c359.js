var suggestions=document.getElementById("suggestions"),search=document.getElementById("search");search!==null&&document.addEventListener("keydown",inputFocus);function inputFocus(e){e.ctrlKey&&e.key==="/"&&(e.preventDefault(),search.focus()),e.key==="Escape"&&(search.blur(),suggestions.classList.add("d-none"))}document.addEventListener("click",function(e){var t=suggestions.contains(e.target);t||suggestions.classList.add("d-none")}),document.addEventListener("keydown",suggestionFocus);function suggestionFocus(n){const s=suggestions.classList.contains("d-none");if(s)return;const e=[...suggestions.querySelectorAll("a")];if(e.length===0)return;const t=e.indexOf(document.activeElement);if(n.key==="ArrowUp"){n.preventDefault();const s=t>0?t-1:0;e[s].focus()}else if(n.key==="ArrowDown"){n.preventDefault();const s=t+1<e.length?t+1:t;e[s].focus()}}(function(){var e=new FlexSearch.Document({tokenize:"forward",cache:100,document:{id:"id",store:["href","title","description"],index:["title","description","content"]}});e.add({id:0,href:"/docs/prologue/introduction/",title:"Introduction",description:"Nightingale is an open-source project focused on alerting. Similar to Grafana's data source integration approach, Nightingale also connects with various existing data sources. However, while Grafana focuses on visualization, Nightingale emphasizes alerting engines.",content:"Nightingale is an open-source project focused on alerting. Similar to Grafana\u0026rsquo;s data source integration approach, Nightingale also connects with various existing data sources. However, while Grafana focuses on visualization, Nightingale focuses on alerting engines.\nRepo #  Backend: https://github.com/ccfos/nightingale Frontend: https://github.com/n9e/fe  Any issues or PRs are welcome!\nArchitecture # The Nightingale project is very open and can interact with common collectors in the open source community, such as categraf, telegraf, datadog-agent, grafana-agent, as well as common time series databases in the open source community, such as Prometheus, VictoriaMetrics, Thanos, as well as logging stores, such as ElasticSearch, Loki, as well as common notification mediums, such as Slack, mm, Dingtalk, Wecom.\nKey Capabilities # Nightingle can be used as an alert engine to make anomaly judgment on data. It supports to configure different effective time for alert strategies, multiple judgment rules can be configured within the same alert strategy, and multiple rules can be inhibited according to the severity.\nNightingale can be used as a visualization tool, similar to Grafana, to view metrics and log data, and supports making dashboards, which support pie charts, line charts, and many other chart types.\nNightingale has built-in alerting rules and dashboards for different middleware and databases right out of the box.\nNightingale supports Kibana-like query exploration, which allows you to filter logs by keywords and filters.\n"}),e.add({id:1,href:"/docs/usage/quick-start-external-datasource/",title:"Quick Start(External Datasource)",description:"Add datasource # We can add Prometheus, VictoriaMetrics, Thanos, ElasticSearch, Loki, etc. as data sources.\nQuery metrics # Go to the exploration page to query metrics. If data can be queried, it indicates that the data source configuration is correct.\nAdd alerting rules # Want to add alerting rules? Go to the alerting page to add alerting rules.\nQuery events # If everything is normal, an alarm event will be generated shortly.",content:"Add datasource # We can add Prometheus, VictoriaMetrics, Thanos, ElasticSearch, Loki, etc. as data sources.\nQuery metrics # Go to the exploration page to query metrics. If data can be queried, it indicates that the data source configuration is correct.\nAdd alerting rules # Want to add alerting rules? Go to the alerting page to add alerting rules.\nQuery events # If everything is normal, an alarm event will be generated shortly. Go to the active event page to view the alarm event.\nUsing Notification Media # Nightingale supports Slack, mm, Dingtalk, Wecom, etc. as notification media.\nYou can perform the test by following these steps:\n Enable email channel Configure email attribute in profile page Check email channel in alerting rule Configure event receiver in alerting rule  "}),e.add({id:2,href:"/docs/usage/quick-start-from-agent/",title:"Quick Start(Starting from agent)",description:"Configure Pushgw.Writers # Configure Pushgw.Writers in config.toml. The default configuration is as follows:\n[[Pushgw.Writers]] # Url = \u0026quot;http://127.0.0.1:8480/insert/0/prometheus/api/v1/write\u0026quot; Url = \u0026quot;http://127.0.0.1:9090/api/v1/write\u0026quot; ...  Make sure that the Url is prometheus remote write api address.\nInstall agent # We recommand you to use Categraf as agent collector. Categraf can receive monitoring data as well as heartbeat requests.\nThen start Categraf and you\u0026rsquo;re done.\nCheck Host List # Menu location: Infrastructure -\u0026gt; Host.",content:"Configure Pushgw.Writers # Configure Pushgw.Writers in config.toml. The default configuration is as follows:\n[[Pushgw.Writers]] # Url = \u0026quot;http://127.0.0.1:8480/insert/0/prometheus/api/v1/write\u0026quot; Url = \u0026quot;http://127.0.0.1:9090/api/v1/write\u0026quot; ...  Make sure that the Url is prometheus remote write api address.\nInstall agent # We recommand you to use Categraf as agent collector. Categraf can receive monitoring data as well as heartbeat requests.\nThen start Categraf and you\u0026rsquo;re done.\nCheck Host List # Menu location: Infrastructure -\u0026gt; Host. You\u0026rsquo;ll see the host list under All hosts.\nCheck Host Metrics # Menu location: Metrics -\u0026gt; Explorer. You can use cpu_usage_active as promql query to check host metrics.\nImport dashboards # Menu location: Dashboard -\u0026gt; Built-in. You can clone Linux Host by Categraf under Linux Category to Default busi group then view the data through the dashboard.\nImport alerting rules # Menu location: Monitors -\u0026gt; Built-in. You can clone all the rules under Linux Category to Default busi group then alarm will be triggered if any rule is violated.\nScreenshot of the Active alarms page:\n"}),e.add({id:3,href:"/docs/install/compose/",title:"Docker Compose",description:"Deploy nightingale via Docker compose",content:"$ git clone https://github.com/ccfos/nightingale.git $ cd nightingale/docker/compose-bridge $ docker-compose up -d Creating network \u0026quot;docker_nightingale\u0026quot; with driver \u0026quot;bridge\u0026quot; Creating mysql ... done Creating redis ... done Creating prometheus ... done Creating ibex ... done Creating agentd ... done Creating nwebapi ... done Creating nserver ... done Creating telegraf ... done $ docker-compose ps NAME IMAGE COMMAND SERVICE CREATED STATUS PORTS categraf flashcatcloud/categraf:latest \u0026quot;/entrypoint.sh\u0026quot; categraf 2 days ago Up 2 days ibex ulric2019/ibex:0.3 \u0026quot;sh -c '/wait \u0026amp;\u0026amp; /ap…\u0026quot; ibex 2 days ago Up 2 days mysql mysql:5.7 \u0026quot;docker-entrypoint.s…\u0026quot; mysql 2 days ago Up 2 days n9e flashcatcloud/nightingale:latest \u0026quot;sh -c '/wait \u0026amp;\u0026amp; /ap…\u0026quot; n9e 2 days ago Up 2 days prometheus prom/prometheus \u0026quot;/bin/prometheus --c…\u0026quot; prometheus 2 days ago Up 2 days redis redis:6.2 \u0026quot;docker-entrypoint.s…\u0026quot; redis 2 days ago Up 2 days  Use your browser to access Nightingale\u0026rsquo;s web page at http://localhost:17000. The default username is root and default password is root.2020.\n"}),e.add({id:4,href:"/docs/install/helm/",title:"Helm",description:"Nightingale Helm chart",content:"You can use the n9e helm chart to run n9e in K8s cluster.\nThe default n9e username is root and password is root.2020.\n"}),e.add({id:5,href:"/docs/install/binary/",title:"Binary install",description:"Deploy nightingale via binary",content:"Download # Download the latest release from GitHub, then you will get a tarball which name is like n9e-{version}-linux-amd64.tar.gz\nInstall # #!/bin/bash mkdir /opt/n9e \u0026amp;\u0026amp; tar zxvf n9e-{version}-linux-amd64.tar.gz -C /opt/n9e cd /opt/n9e # init database mysql -uroot -p1234 \u0026lt; n9e.sql # check configurations in /opt/n9e/etc/config.toml and start n9e nohup ./n9e \u0026amp;\u0026gt; n9e.log \u0026amp;  Check Process # # check process is runing or not ss -tlnp|grep 17000  Login # Open web browser and go to http://localhost:17000. The default username is root and default password is root.2020.\n"}),e.add({id:6,href:"/docs/agent/categraf/",title:"Categraf",description:"use categraf to collect metrics",content:"Categraf is an agent which can collect metrics and logs. Categraf uses prometheus remote write as data push protocol, so it can push metrics to Nightingale.\nConfiguration # Configuration file of categraf: conf/config.toml\n[writer_opt] # default: 2000 batch = 2000 # channel(as queue) size chan_size = 10000 [[writers]] url = \u0026quot;http://N9E:17000/prometheus/v1/write\u0026quot; # Basic auth username basic_auth_user = \u0026quot;\u0026quot; # Basic auth password basic_auth_pass = \u0026quot;\u0026quot; # timeout settings, unit: ms timeout = 5000 dial_timeout = 2500 max_idle_conns_per_host = 100 [heartbeat] enable = true # report os version cpu.util mem.util metadata url = \u0026quot;http://N9E:17000/v1/n9e/heartbeat\u0026quot; # interval, unit: s interval = 10 # Basic auth username basic_auth_user = \u0026quot;\u0026quot; # Basic auth password basic_auth_pass = \u0026quot;\u0026quot; ## Optional headers # headers = [\u0026quot;X-From\u0026quot;, \u0026quot;categraf\u0026quot;, \u0026quot;X-Xyz\u0026quot;, \u0026quot;abc\u0026quot;] # timeout settings, unit: ms timeout = 5000 dial_timeout = 2500 max_idle_conns_per_host = 100  We highly recommend that you use Categraf as collector for Nightingale.\n"}),e.add({id:7,href:"/docs/agent/telegraf/",title:"Telegraf",description:"Use Telegraf as collector for Nightingale",content:"Introduction # Telegraf is an agent for collecting, processing, aggregating, and writing metrics. Based on a plugin system to enable developers in the community to easily add support for additional metric collection.\nTelegraf supports multiple output plugins and we use opentsdb plugin to send metrics to Nightingale.\nInstall # #!/bin/sh version=1.20.4 tarball=telegraf-${version}_linux_amd64.tar.gz wget https://dl.influxdata.com/telegraf/releases/$tarball tar xzvf $tarball mkdir -p /opt/telegraf cp -far telegraf-${version}/usr/bin/telegraf /opt/telegraf cat \u0026lt;\u0026lt;EOF \u0026gt; /opt/telegraf/telegraf.conf [global_tags] [agent] interval = \u0026quot;10s\u0026quot; round_interval = true metric_batch_size = 1000 metric_buffer_limit = 10000 collection_jitter = \u0026quot;0s\u0026quot; flush_interval = \u0026quot;10s\u0026quot; flush_jitter = \u0026quot;0s\u0026quot; precision = \u0026quot;\u0026quot; hostname = \u0026quot;\u0026quot; omit_hostname = false [[outputs.opentsdb]] host = \u0026quot;http://127.0.0.1\u0026quot; port = 17000 http_batch_size = 50 http_path = \u0026quot;/opentsdb/put\u0026quot; debug = false separator = \u0026quot;_\u0026quot; [[inputs.cpu]] percpu = true totalcpu = true collect_cpu_time = false report_active = true [[inputs.disk]] ignore_fs = [\u0026quot;tmpfs\u0026quot;, \u0026quot;devtmpfs\u0026quot;, \u0026quot;devfs\u0026quot;, \u0026quot;iso9660\u0026quot;, \u0026quot;overlay\u0026quot;, \u0026quot;aufs\u0026quot;, \u0026quot;squashfs\u0026quot;] [[inputs.diskio]] [[inputs.kernel]] [[inputs.mem]] [[inputs.processes]] [[inputs.system]] fielddrop = [\u0026quot;uptime_format\u0026quot;] [[inputs.net]] ignore_protocol_stats = true EOF cat \u0026lt;\u0026lt;EOF \u0026gt; /etc/systemd/system/telegraf.service [Unit] Description=\u0026quot;telegraf\u0026quot; After=network.target [Service] Type=simple ExecStart=/opt/telegraf/telegraf --config telegraf.conf WorkingDirectory=/opt/telegraf SuccessExitStatus=0 LimitNOFILE=65535 StandardOutput=syslog StandardError=syslog SyslogIdentifier=telegraf KillMode=process KillSignal=SIGQUIT TimeoutStopSec=5 Restart=always [Install] WantedBy=multi-user.target EOF systemctl daemon-reload systemctl enable telegraf systemctl restart telegraf systemctl status telegraf  "}),e.add({id:8,href:"/docs/agent/datadog-agent/",title:"Datadog-Agent",description:"Use Datadog-Agent as collector for Nightingale",content:"Configuration # Mofidy the configuration item dd_url in the file /etc/datadog-agent/datadog.yaml.\ndd_url: http://nightingale-address/datadog  nightingale-address is your Nightingale address.\nRestart # Restart the Datadog-Agent.\nsystemctl restart datadog-agent  "}),e.add({id:9,href:"/docs/agent/grafana-agent/",title:"Grafana-Agent",description:"Use Grafana-Agent as collector for Nightingale",content:"Introduction # Grafana Agent is a vendor-neutral, batteries-included telemetry collector with configuration inspired by Terraform. It is designed to be flexible, performant, and compatible with multiple ecosystems such as Prometheus and OpenTelemetry.\nGrafana Agent is based around components. Components are wired together to form programmable observability pipelines for telemetry collection, processing, and delivery.\nConfiguration # server: log_level: info http_listen_port: 12345 metrics: global: scrape_interval: 15s scrape_timeout: 10s remote_write: - url: https://N9E:17000/prometheus/v1/write basic_auth: username: \u0026quot;\u0026quot; password: \u0026quot;\u0026quot; integrations: agent: enabled: true node_exporter: enabled: true include_exporter_metrics: true  Restart # nohup ./agent-linux-amd64 \\ -config.file ./agent-cfg.yaml \\ -metrics.wal-directory ./data \\ \u0026amp;\u0026gt; grafana-agent.log \u0026amp;  "}),e.add({id:10,href:"/docs/usage/",title:"Usage",description:"Nightingale usage book",content:""}),e.add({id:11,href:"/docs/agent/",title:"Collector",description:"Categraf, Telegraf, Grafana-Agent, Datadog-Agent",content:""}),e.add({id:12,href:"/docs/install/",title:"Installation",description:"How to install nightingale project",content:""}),e.add({id:13,href:"/docs/prologue/",title:"Prologue",description:"Nightingale's introduction",content:""}),e.add({id:14,href:"/docs/",title:"Nightingale",description:"Nightingale is a cloud native monitoring system",content:""}),search.addEventListener("input",t,!0);function t(){const s=5;var n=this.value,o=e.search(n,{limit:s,enrich:!0});const t=new Map;for(const e of o.flatMap(e=>e.result)){if(t.has(e.doc.href))continue;t.set(e.doc.href,e.doc)}if(suggestions.innerHTML="",suggestions.classList.remove("d-none"),t.size===0&&n){const e=document.createElement("div");e.innerHTML=`No results for "<strong>${n}</strong>"`,e.classList.add("suggestion__no-results"),suggestions.appendChild(e);return}for(const[r,a]of t){const n=document.createElement("div");suggestions.appendChild(n);const e=document.createElement("a");e.href=r,n.appendChild(e);const o=document.createElement("span");o.textContent=a.title,o.classList.add("suggestion__title"),e.appendChild(o);const i=document.createElement("span");if(i.textContent=a.description,i.classList.add("suggestion__description"),e.appendChild(i),suggestions.appendChild(n),suggestions.childElementCount==s)break}}})()