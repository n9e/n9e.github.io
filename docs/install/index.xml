<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>安装部署 on</title><link>https://n9e.github.io/docs/install/</link><description>Recent content in 安装部署 on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Tue, 06 Oct 2020 08:49:15 +0000</lastBuildDate><atom:link href="https://n9e.github.io/docs/install/index.xml" rel="self" type="application/rss+xml"/><item><title>Docker Compose</title><link>https://n9e.github.io/docs/install/compose/</link><pubDate>Thu, 12 Nov 2020 13:26:54 +0100</pubDate><guid>https://n9e.github.io/docs/install/compose/</guid><description>使用Docker Compose一键启动夜莺，快速尝试。更多Docker Compose相关知识请参考Docker官网
$ git clone https://gitlink.org.cn/ccfos/nightingale.git $ cd nightingale/docker $ docker compose up -d Creating network &amp;quot;docker_nightingale&amp;quot; with driver &amp;quot;bridge&amp;quot; Creating mysql ... done Creating redis ... done Creating prometheus ... done Creating ibex ... done Creating agentd ... done Creating nwebapi ... done Creating nserver ... done Creating telegraf ... done $ docker compose ps Name Command State Ports ---------------------------------------------------------------------------------------------------------------------------- agentd /app/ibex agentd Up 10090/tcp, 20090/tcp ibex /app/ibex server Up 0.</description></item><item><title>Helm</title><link>https://n9e.github.io/docs/install/helm/</link><pubDate>Thu, 12 Nov 2020 13:26:54 +0100</pubDate><guid>https://n9e.github.io/docs/install/helm/</guid><description>Helm chart 由快猫团队维护，地址：https://github.com/flashcatcloud/n9e-helm 夜莺系统的默认用户是root，密码是root.2020</description></item><item><title>服务端组件部署</title><link>https://n9e.github.io/docs/install/server/</link><pubDate>Thu, 12 Nov 2020 13:26:54 +0100</pubDate><guid>https://n9e.github.io/docs/install/server/</guid><description>首先我们来看下面的架构图，夜莺的服务端有两个模块：n9e-webapi 和 n9e-server，n9e-webapi 用于提供 API 给前端 JavaScript 使用，n9e-server 的职责是告警引擎和数据转发器。依赖的组件有 MySQL、Redis、时序库，时序库我们这里使用 Prometheus。
组件安装 # mysql、redis、prometheus，这三个组件都是开源软件，请大家自行安装，其中 prometheus 在启动的时候要注意开启 --enable-feature=remote-write-receiver ，如果之前贵司已经有 Prometheus 了，也可以直接使用，无需再次部署。这里也提供一个小脚本来安装这3个组件，大家可以参考：
# install prometheus mkdir -p /opt/prometheus wget https://s3-gz01.didistatic.com/n9e-pub/prome/prometheus-2.28.0.linux-amd64.tar.gz -O prometheus-2.28.0.linux-amd64.tar.gz tar xf prometheus-2.28.0.linux-amd64.tar.gz cp -far prometheus-2.28.0.linux-amd64/* /opt/prometheus/ # service cat &amp;lt;&amp;lt;EOF &amp;gt;/etc/systemd/system/prometheus.service [Unit] Description=&amp;quot;prometheus&amp;quot; Documentation=https://prometheus.io/ After=network.target [Service] Type=simple ExecStart=/opt/prometheus/prometheus --config.file=/opt/prometheus/prometheus.yml --storage.tsdb.path=/opt/prometheus/data --web.enable-lifecycle --enable-feature=remote-write-receiver --query.lookback-delta=2m Restart=on-failure SuccessExitStatus=0 LimitNOFILE=65536 StandardOutput=syslog StandardError=syslog SyslogIdentifier=prometheus [Install] WantedBy=multi-user.target EOF systemctl daemon-reload systemctl enable prometheus systemctl restart prometheus systemctl status prometheus # install mysql yum -y install mariadb* systemctl enable mariadb systemctl restart mariadb mysql -e &amp;quot;SET PASSWORD FOR 'root'@'localhost' = PASSWORD('1234');&amp;quot; # install redis yum install -y redis systemctl enable redis systemctl restart redis 上例中mysql的root密码设置为了1234，建议维持这个不变，后续就省去了修改配置文件的麻烦。</description></item><item><title>VictoriaMetrics</title><link>https://n9e.github.io/docs/install/victoria/</link><pubDate>Thu, 12 Nov 2020 13:26:54 +0100</pubDate><guid>https://n9e.github.io/docs/install/victoria/</guid><description>简介 # VictoriaMetrics 架构简单，可靠性高，在性能，成本，可扩展性方面表现出色，社区活跃，且和 Prometheus 生态绑定紧密。如果单机版本的 Prometheus 无法在容量上满足贵司的需求，可以使用 VictoriaMetrics 作为时序数据库。
VictoriaMetrics 提供单机版和集群版。如果您的每秒写入数据点数小于100万（这个数量是个什么概念呢，如果只是做机器设备的监控，每个机器差不多采集200个指标，采集频率是10秒的话每台机器每秒采集20个指标左右，100万/20=5万台机器），VictoriaMetrics 官方默认推荐您使用单机版，单机版可以通过增加服务器的CPU核心数，增加内存，增加IOPS来获得线性的性能提升。且单机版易于配置和运维。
集群架构 # vmstorage、vminsert、vmselect 三者组合构成 VictoriaMetrics 的集群功能，三者都可以通过启动多个实例来分担承载流量，通过要在 vminsert 和 vmselect 前面架设负载均衡。
vmstorage 是数据存储模块
其数据保存在-storageDataPath指定的目录中，默认为./vmstorage-data/，vmstorage 是有状态模块，删除 storage node 会丢失约 1/N的历史数据（N 为集群中 vmstorage node 的节点数量）。增加 storage node，则需要同步修改 vminsert 和 vmselect 的启动参数，将新加入的storage node节点地址通过命令行参数 -storageNode传入给vminsert和vmselect vmstorage 启动后，会监听三个端口，分别是 -httpListenAddr :8482、-vminsertAddr :8400、-vmselectAddr :8401。端口8400负责接收来自 vminsert 的写入请求，端口8401负责接收来自 vmselect 的数据查询请求，端口8482则是 vmstorage 自身提供的 http api 接口 vminsert 接收来自客户端的数据写入请求，并负责转发到选定的vmstorage
vminsert 接收到数据写入请求后，按照 jump consistent hash 算法，将数据转发到选定的某个vmstorage node 上。vminsert 本身是无状态模块，可以增加或者删除一个或多个实例，而不会造成数据的损失。vminsert 模块通过启动时的参数 -storageNode xxx,yyy,zzz 来感知到整个 vmstorage 集群的完整 node 地址列表 vminsert 启动后，会监听一个端口-httpListenAddr :8480。该端口实现了 prometheus remote_write协议，因此可以接收和解析通过 remote_write 协议写入的数据。不过要注意，VictoriaMetrics 集群版本具有多租户功能，因此租户ID会以如下形式出现在 API URL 中: http://vminsert:8480/insert/&amp;lt;account_id&amp;gt;/prometheus/api/v1/write 更多 URL Format 可以参考 VictoriaMetrics官网 vmselect 接收来自客户端的数据查询请求，并负责转发到所有的 vmstorage 查询结果，最后将结果 merge 后返回</description></item><item><title>Ibex</title><link>https://n9e.github.io/docs/install/ibex/</link><pubDate>Thu, 12 Nov 2020 13:26:54 +0100</pubDate><guid>https://n9e.github.io/docs/install/ibex/</guid><description>Ibex 是告警自愈功能依赖的模块，提供一个批量执行命令的通道，可以做到在告警的时候自动去目标机器执行脚本，如果大家没有此需求，无需阅读本节内容。
概述 # 所谓的告警自愈，典型手段是在告警触发时自动回调某个 webhook 地址，在这个 webhook 里写告警自愈的逻辑，夜莺默认支持这种方式。另外，夜莺还可以更进一步，配合 ibex 这个模块，在告警触发的时候，自动去告警的机器执行某个脚本，这种机制可以大幅简化构建运维自愈链路的工作量，毕竟，不是所有的运维人员都擅长写 http server，但所有的运维人员，都擅长写脚本。这种方式是典型的物理机时代的产物，希望各位朋友用不到这个工具（说明贵司的IT技术已经走得非常靠前了）。
架构 # ibex 包括 server 和 agentd 两个模块，agentd 周期性调用 server 的 rpc 接口，询问有哪些任务要执行，如果有分配给自己的任务，就从 server 拿到任务脚本信息，在本地 fork 一个进程运行，然后将结果上报给服务端。为了简化部署，server 和 agentd 融合成了一个二进制，就是 ibex，通过传入不同的参数来启动不同的角色。ibex 架构图如下：
项目地址 # Repo：https://github.com/flashcatcloud/ibex Linux-amd64 有编译好的二进制，在这里 安装启动 # 下载安装包之后，解压缩，在 etc 下可以找到服务端和客户端的配置文件，在 sql 目录下可以找到初始化 sql 脚本。
初始化 sql # mysql &amp;lt; sql/ibex.sql 启动 server # server 的配置文件是 etc/server.conf，注意修改里边的 mysql 连接地址，配置正确的 mysql 用户名和密码。然后就可以直接启动了：
nohup ./ibex server &amp;amp;&amp;gt; server.</description></item></channel></rss>