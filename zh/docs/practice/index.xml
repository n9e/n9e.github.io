<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>监控实践 on</title><link>https://n9e.github.io/zh/docs/practice/</link><description>Recent content in 监控实践 on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Sun, 01 Jun 2025 19:41:08 +0800</lastBuildDate><atom:link href="https://n9e.github.io/zh/docs/practice/index.xml" rel="self" type="application/rss+xml"/><item><title>Linux OS</title><link>https://n9e.github.io/zh/docs/practice/linux/</link><pubDate>Sun, 01 Jun 2025 19:42:42 +0800</pubDate><guid>https://n9e.github.io/zh/docs/practice/linux/</guid><description>对于监控系统，基础功能的强弱确实非常关键，但是如何在不同的场景落地实践，则更为关键。在《监控实践》章节，搜罗各类监控实践经验，会以不同的组件分门别类，您如果对某个组件有好的实践经验，欢迎提 PR，把您的文章链接附到对应的组件目录下。
Linux 主机监控最佳实践 透过 Node-Exporter 彻底搞懂机器监控 FAQ # 1. 我的机器列表里可以看到机器，也可以看到机器的CPU、内存等信息，但是仪表盘查不到数据
💡 注意：机器列表里那些 CPU、内存等信息，不是存储在时序库的，而是存储在 Redis 中的，是 Categraf 调用夜莺的 heartbeat 接口时上报上来的，和 Remote write 走的是两个路径。
这个问题从如下几个方面排查：
1、看 Categraf 的日志
作为 IT 从业人员，第一反应就是应该看相关组件的日志，Categraf 的日志默认打在 stdout，如果是 systemd 托管的 Categraf，则使用 journalctl 查看，比如 journalctl -u categraf.service。如果对 Linux 不太熟悉，直接在命令行里前台启动 Categraf，可以更方便查看日志，即：
./categraf 如上就是直接把 Categraf 进程启动在前台，日志会直接输出到终端，方便查看。
2、确认 Categraf 的配置
机器列表里可以正常看到内容，说明 Categraf 的配置里的 heartbeat 部分配置是正常的。仪表盘看不到监控数据，可能是 writer 部分的配置有问题，writer 部分的 url 应该配置为夜莺的地址，urlpath 是 /prometheus/v1/write。
3、确认夜莺的配置</description></item><item><title>进程监控</title><link>https://n9e.github.io/zh/docs/practice/proc/</link><pubDate>Tue, 03 Jun 2025 09:15:37 +0800</pubDate><guid>https://n9e.github.io/zh/docs/practice/proc/</guid><description>对于监控系统，基础功能的强弱确实非常关键，但是如何在不同的场景落地实践，则更为关键。在《监控实践》章节，搜罗各类监控实践经验，会以不同的组件分门别类，您如果对某个组件有好的实践经验，欢迎提 PR，把您的文章链接附到对应的组件目录下。
进程监控分两部分，一部分是操作系统内整体进程数量统计，另一部分是单一进程指标采集。
总体进程数量 # 以 Categraf 为例，Categraf 提供了 processes 插件用于统计机器上的进程数量，比如总进程数量多少、Running 状态的进程数量多少、Sleeping 状态的进程数量多少等。针对 processes 插件采集的数据，我们整理过专门的仪表盘：
https://github.com/ccfos/nightingale/blob/main/integrations/Linux/dashboards/categraf-processes.json
这类指标有什么用？通常是非预期的启动了大量进程的场景。比如笔者之前遇到：crontab 写挫了，脚本 hang 住了，而且没有在 cron 脚本里检测之前的进程是否退出，导致每次 crontab 执行时都启动了一个新的进程，最终导致机器上有大量的同名进程在运行，最终酿成事故。这个时候就可以通过 processes 插件采集的指标来发现问题。
单一进程指标 # 单一进程指标，指的是进程占用的 CPU、内存、句柄等指标。有多种方式可以采集。
在进程里埋点。比如 Java 程序可以使用 micrometer 或者 Spring Boot Actuator 等方式来采集指标，Go 程序可以使用 Prometheus 的 Go 语言客户端库来采集指标。 在进程外采集。比如使用 Process Exporter、Categraf 的 procstat 插件等采集进程指标。 通常来讲，在进程里埋点是更推荐的做法。不但可以采集进程的 CPU、内存 等常规指标，也可以采集更多运行时指标，比如 Java 程序可以采集 JVM 的一些指标，Go 程序可以采集一些 goroutine、gc 的指标。所有优秀的开源软件，都会暴露自身的监控指标。作为业务研发人员，水平参差不齐，可能有些人不清楚埋点的重要性，此时也可使用进程外采集的方式来做补充。
Spring Boot Actuator 是可以通过配置调整来直接暴露 Prometheus 格式的 metrics 数据的，所以不需要额外的插件来采集，直接使用 Categraf 的 prometheus 插件即可。或者直接在 Prometheus 或 vmagent 里配置抓取规则也可以。</description></item><item><title>端口监控</title><link>https://n9e.github.io/zh/docs/practice/port/</link><pubDate>Mon, 09 Jun 2025 09:58:02 +0800</pubDate><guid>https://n9e.github.io/zh/docs/practice/port/</guid><description>对于监控系统，基础功能的强弱确实非常关键，但是如何在不同的场景落地实践，则更为关键。在《监控实践》章节，搜罗各类监控实践经验，会以不同的组件分门别类，您如果对某个组件有好的实践经验，欢迎提 PR，把您的文章链接附到对应的组件目录下。
端口监控，是进程存活性探测的典型方式，相比统计进程数量，端口监控更为靠谱，因为进程有时会 hang 住，导致进程数量统计正常，但是端口无法正常响应。
一般来说，端口探测分三种协议：
TCP 协议 UDP 协议 HTTP 协议 依据服务监听的端口协议类型不同，使用的探测方式也不同。
TCP/UDP 协议 # TCP/UDP 协议的端口监控，适合针对 RPC 类的服务，可以使用 Categraf 的 net_response 插件来实现。
Categraf net_response 插件说明 这里最应该关注的指标是：net_response_result_code，如果这个指标的值是 0，表示一切正常，如果非 0 则表示异常，不同的值表示不同的异常类型。
0: Success 1: Timeout 2: ConnectionFailed 3: ReadFailed 4: StringMismatch 在夜莺的集成中心-模板中心可以找到相关的仪表盘。
HTTP 协议 # HTTP 协议的探测和 TCP/UDP 协议类似，Categraf 也提供了 http_response 插件来实现。相比 TCP/UDP 协议，HTTP 协议的端口监控可以更进一步，除了探测端口是否可用，还可以探测 HTTP 响应内容（返回的状态码、返回的 Response body）是否符合预期，如果是 HTTPS 站点，还可以探测证书过期时间。
Categraf http_response 插件说明 用于告警的指标是 http_response_result_code 只要这个指标是 0 就是正常的，如果这个指标非 0，就是异常的，不同的值代表不同的含义：</description></item><item><title>插件脚本</title><link>https://n9e.github.io/zh/docs/practice/exec/</link><pubDate>Thu, 05 Jun 2025 14:49:37 +0800</pubDate><guid>https://n9e.github.io/zh/docs/practice/exec/</guid><description>对于监控系统，基础功能的强弱确实非常关键，但是如何在不同的场景落地实践，则更为关键。在《监控实践》章节，搜罗各类监控实践经验，会以不同的组件分门别类，您如果对某个组件有好的实践经验，欢迎提 PR，把您的文章链接附到对应的组件目录下。
Categraf 虽然已经内置了很多采集插件，但是总会有一些自定义监控数据采集的需求场景，此时可以考虑使用 Categraf 的 input.exec 插件。这个插件可以执行用户指定的脚本（可以是 Shell、Python、Perl 等脚本，也可以是 Go、C++ 的二进制，只要是个可执行文件就行），然后截获脚本的 stdout，解析为监控数据。
EXEC 插件使用文档 之前有些社区用户提供了一些插件脚本样例，可以参考：Categraf Exec 插件脚本样例。也欢迎大家继续提交样例。</description></item><item><title>MySQL</title><link>https://n9e.github.io/zh/docs/practice/mysql/</link><pubDate>Tue, 03 Jun 2025 15:22:57 +0800</pubDate><guid>https://n9e.github.io/zh/docs/practice/mysql/</guid><description> 对于监控系统，基础功能的强弱确实非常关键，但是如何在不同的场景落地实践，则更为关键。在《监控实践》章节，搜罗各类监控实践经验，会以不同的组件分门别类，您如果对某个组件有好的实践经验，欢迎提 PR，把您的文章链接附到对应的组件目录下。
使用 Categraf 监控 MySQL 的入门教程 根据夜莺模板中心的引导，建设 MySQL 监控 如何发现及处理 MySQL 主从延迟问题 MySQL 监控原理讲解 使用 Exporter 监控 MySQL 解决 MySQL 的 max_prepared_stmt_count 问题 除了 MySQL 的性能数据的监控，我们也可以自定义 SQL 来监控 MySQL 中的数据（通过 Categraf 的 mysql 插件即可做到），这通常会有两个用途：
扩展性能监控指标，默认的性能监控数据不够用的话，可以通过这种方式来扩展 监控业务数据，这个场景就极为广泛了，比如监控订单数据、用户数据等。这个场景容易被大家忽略，但有时有奇效</description></item><item><title>Redis</title><link>https://n9e.github.io/zh/docs/practice/redis/</link><pubDate>Thu, 05 Jun 2025 14:22:57 +0800</pubDate><guid>https://n9e.github.io/zh/docs/practice/redis/</guid><description> 对于监控系统，基础功能的强弱确实非常关键，但是如何在不同的场景落地实践，则更为关键。在《监控实践》章节，搜罗各类监控实践经验，会以不同的组件分门别类，您如果对某个组件有好的实践经验，欢迎提 PR，把您的文章链接附到对应的组件目录下。
Categraf 采集 Redis 监控数据 使用 Cprobe 监控 MySQL、Redis、MongoDB、Oracle、Postgres 等 Redis 监控采集原理 # 不管使用 Categraf 还是 Redis-Exporter 采集 Redis 的监控数据，原理都是类似的，通过 Redis 连接地址、用户名密码等信息连到 Redis 上，执行 info 之类的命令获取监控数据。
如何接入 Redis-Exporter # 有些用户用了 Categraf 采集机器指标、进程指标、自定义插件，但是没有使用 Categraf 采集 Redis 的监控数据，而是使用了 Redis-Exporter。然后就比较困惑：如何把 Redis-Exporter 采集的数据接入到夜莺中？
有两个办法：
直接在你的时序库里配置 Scrape 规则，抓取 Redis-Exporter 的数据 使用 Categraf 的 input.prometheus 插件，抓取 Redis-Exporter 的数据</description></item></channel></rss>