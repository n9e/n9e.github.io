<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>用例精讲 on</title><link>https://n9e.github.io/zh/docs/usecase/</link><description>Recent content in 用例精讲 on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Fri, 06 Jun 2025 10:41:08 +0800</lastBuildDate><atom:link href="https://n9e.github.io/zh/docs/usecase/index.xml" rel="self" type="application/rss+xml"/><item><title>Webhook(Callback)</title><link>https://n9e.github.io/zh/docs/usecase/webhook/</link><pubDate>Fri, 06 Jun 2025 10:54:48 +0800</pubDate><guid>https://n9e.github.io/zh/docs/usecase/webhook/</guid><description>本文讲解夜莺 v8.beta13 以上版本的 Webhook(Callback) 相关能力。Webhook 通常用在两个场景：
与夜莺联动事件自动化处理： 事件触发后，夜莺可以通过 Webhook 通知外部系统，外部系统可以根据事件内容进行自动化处理。 事件触发后，夜莺可以通过 Webhook 通知外部系统，外部系统对事件做修改，然后把事件返回，继续在夜莺中处理。相当于外部系统充当了夜莺的事件处理器。 与夜莺联动事件通知： 事件触发后，夜莺可以通过 Webhook 通知外部系统，外部系统可以根据事件内容进行告警通知，即外部系统仅充当一个通知媒介。 下面我们分别对这两种场景进行讲解演示。
与夜莺联动事件自动化处理 # 需要新建一个“通知规则” 在“通知规则”里，添加事件处理器，事件处理器需要提前创建好，使用 Callback 类型的处理器，创建处理器的页面举例如下。 这里的 http://10.99.1.107:8888/print 是我的一个测试程序，可以把接收到的 HTTP 请求打印出来，方便演示。这个程序也是一个开源小程序，地址在 github gohttpd。
创建了处理器后，回到通知规则页面，添加事件处理器，选择刚才创建的处理器。
接下来，就可以去配置“告警规则”做测试了，测试一下产生的告警能否被第三方程序接收到。
为了尽快看到效果，可以创建一个肯定会触发阈值的告警规则，然后在通知规则那里，选择刚才创建的通知规则：
稍等片刻，去观察 http://10.99.1.107:8888/print 这个程序是否收到回调的 HTTP 请求。我的环境里看到的结果如下：
从上图可以看出，HTTP request 中包含了告警事件的信息，其内容如下：
{ &amp;quot;id&amp;quot;: 1097371, &amp;quot;cate&amp;quot;: &amp;quot;prometheus&amp;quot;, &amp;quot;cluster&amp;quot;: &amp;quot;prom&amp;quot;, &amp;quot;datasource_id&amp;quot;: 1, &amp;quot;group_id&amp;quot;: 2, &amp;quot;group_name&amp;quot;: &amp;quot;DBA-Postgres&amp;quot;, &amp;quot;hash&amp;quot;: &amp;quot;54f5543591c6dc0e30139cae196a1eee&amp;quot;, &amp;quot;rule_id&amp;quot;: 54, &amp;quot;rule_name&amp;quot;: &amp;quot;测试事件回调&amp;quot;, &amp;quot;rule_note&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;rule_prod&amp;quot;: &amp;quot;metric&amp;quot;, &amp;quot;rule_algo&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;severity&amp;quot;: 2, &amp;quot;prom_for_duration&amp;quot;: 0, &amp;quot;prom_ql&amp;quot;: &amp;quot;cpu_usage_active{ident=\&amp;quot;ulric-flashcat.</description></item></channel></rss>