<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>安装 on</title><link>https://n9e.github.io/zh/docs/install/</link><description>Recent content in 安装 on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Tue, 06 Oct 2020 08:49:15 +0000</lastBuildDate><atom:link href="https://n9e.github.io/zh/docs/install/index.xml" rel="self" type="application/rss+xml"/><item><title>安装前置说明</title><link>https://n9e.github.io/zh/docs/install/pre-intro/</link><pubDate>Sat, 31 May 2025 08:47:52 +0800</pubDate><guid>https://n9e.github.io/zh/docs/install/pre-intro/</guid><description>常用的安装方式有：
二进制方式部署 Docker compose 方式部署 Helm 方式部署 首推二进制方式，原因：
夜莺只有一个二进制文件，没有太多依赖，管理起来比较简单，通常大家对 systemd 都比较熟悉，直接用 systemd 管理夜莺的进程就行了 Docker compose 方式比二进制方式性能上稍差，而且 Docker compose 方式需要额外 Docker 相关的知识，还有国内网络导致的镜像拉取问题，有时也会比较难受 Helm 方式用于部署在 Kubernetes 中，但是监控系统是个 P0 级的系统，所有系统都挂了，监控也不能挂，所以如果部署在 Kubernetes 中，那当 Kubernetes 挂的时候，监控也会挂，此时，别的团队可能会来怼你，怨你怎么不提前规划好 不管是哪种安装方式，安装完成后，夜莺的默认用户名是 root，密码是 root.2020。夜莺默认监听的端口是 17000，边缘模式下用的 n9e-edge 端口是 19000。
如果你用到了边缘模式，请务必阅读 边缘模式说明 章节。</description></item><item><title>升级</title><link>https://n9e.github.io/zh/docs/install/upgrade/</link><pubDate>Tue, 17 Jun 2025 15:57:36 +0800</pubDate><guid>https://n9e.github.io/zh/docs/install/upgrade/</guid><description>V6、V7 等版本都可以平滑升级到 V8 版本。
升级步骤 # 备份数据：在升级之前，备份 MySQL 数据库的内容、备份二进制、备份 etc 和 integrations 目录，以防万一，有了后路之后就可以放心大胆操作了 如果是二进制部署，替换二进制、替换 integrations 目录（可以直接把老的 integrations 目录挪走 mv integrations integrations.bak，直接使用新的 integrations 目录），配置文件可以 diff 一下新老配置，手工补齐一下差异点（实际上应该几乎不用修改配置文件，因为已经很久没有调整过了） 如果是容器部署的，拉取一下最新的镜像，配置文件 diff 一下，补齐差异点，再重启一下容器即可 关于 DB 表结构 # 如果夜莺所用的 DB 账号是有建表、改表权限的话，您不需要手动去修改 DB 表结构，夜莺会在启动时自动检查表结构是否需要升级，如果需要升级，则会自动改表。如果夜莺所用的 DB 账号没有建表、改表权限，则需要手工调整，近期的改动可以参考 migrate.sql。</description></item><item><title>二进制部署</title><link>https://n9e.github.io/zh/docs/install/binary/</link><pubDate>Thu, 12 Nov 2020 13:26:54 +0100</pubDate><guid>https://n9e.github.io/zh/docs/install/binary/</guid><description>如果您尚未阅读《安装前置说明》 章节，请先阅读，之后再阅读本章节。
下载 # 从 GitHub 下载最新版本，然后你会得到一个类似 n9e-${version}-linux-amd64.tar.gz 的压缩包。这是 X86 CPU 架构的发布包，如果你需要 ARM 架构的就下载那个 arm64 的包，没有提供 Windows 版本的发布包，因为夜莺监控是一个服务端项目，通常运行在 Linux 系统上。
如果你想在 Windows 和 Mac 上运行夜莺也是 OK 的，只是需要你自行编译了，编译也比较简单，可以参考项目代码仓库下的 Makefile 文件内的逻辑。
将下载的压缩包解压缩到 /opt/n9e 目录下。
mkdir /opt/n9e &amp;amp;&amp;amp; tar zxvf n9e-${version}-linux-amd64.tar.gz -C /opt/n9e 单节点测试安装 # 这种模式下，只是为了测试，既不用依赖 MySQL 也不用依赖 Redis（实际是使用的 SQLite 和内存型 Redis：miniredis），启动比较简单，直接解压后启动即可。
启动进程 # cd /opt/n9e &amp;amp;&amp;amp; nohup ./n9e &amp;amp;&amp;gt; n9e.log &amp;amp; 因为只是测试模式，就直接使用 nohup 启动了，生产环境肯定是需要使用 systemd 来托管 n9e 进程的。
检查进程 # # check process is runing or not ss -tlnp|grep 17000 登录 # 打开浏览器访问 http://localhost:17000。默认用户名是 root，默认密码是 root.</description></item><item><title>Docker Compose</title><link>https://n9e.github.io/zh/docs/install/compose/</link><pubDate>Thu, 12 Nov 2020 13:26:54 +0100</pubDate><guid>https://n9e.github.io/zh/docs/install/compose/</guid><description>下载 # 参考二进制安装章节，下载夜莺监控的发布包，里面会有 Docker compose 相关的配置文件，也可以直接下载夜莺的源码仓库，里面也可以找到 Docker compose 的配置文件。
启动 # 不管是下载发布包还是源码仓库，解压缩之后都会有一个 docker/compose-bridge 目录，进入这个目录执行 docker-compose up -d 命令即可（国内网络，镜像下载可能会失败，您需要自行解决科学上网的问题）。
root@ubuntu-linux-22-04-desktop:/opt/n9e/docker/compose-bridge# docker compose up -d [+] Running 5/5 ✔ Container victoriametrics Started 0.6s ✔ Container redis Started 0.6s ✔ Container mysql Started 0.6s ✔ Container nightingale Started 0.2s ✔ Container categraf Started 0.2s root@ubuntu-linux-22-04-desktop:/opt/n9e/docker/compose-bridge# docker compose ps NAME IMAGE COMMAND SERVICE CREATED STATUS PORTS categraf m.daocloud.io/docker.io/flashcatcloud/categraf:latest &amp;quot;/entrypoint.sh&amp;quot; categraf 2 minutes ago Up 3 seconds mysql mysql:8 &amp;quot;docker-entrypoint.</description></item><item><title>Helm</title><link>https://n9e.github.io/zh/docs/install/helm/</link><pubDate>Thu, 12 Nov 2020 13:26:54 +0100</pubDate><guid>https://n9e.github.io/zh/docs/install/helm/</guid><description>你可以使用 n9e helm chart 在 Kubernetes 集群中运行夜莺。
默认的夜莺用户名是 root，密码是 root.2020。
不过，我们不建议您把夜莺部署到 Kubernetes 中，因为监控系统太过重要，如果 Kubernetes 集群出现问题，可能会导致监控系统无法正常工作。而此时您可能希望通过监控数据排查 Kubernetes 的问题，导致循环依赖。尤其是，其他团队此时想使用监控系统发现用不了，可能会来怼你。</description></item><item><title>配置讲解</title><link>https://n9e.github.io/zh/docs/install/configuration/</link><pubDate>Thu, 27 Feb 2025 11:00:00 +0800</pubDate><guid>https://n9e.github.io/zh/docs/install/configuration/</guid><description>中心端 n9e 的配置文件是 etc/config.toml，边缘告警引擎 n9e-edge 的配置文件是 etc/edge/edge.toml。这里我们先分块讲解 n9e 的配置文件。
Global # [Global] RunMode = &amp;quot;release&amp;quot; 这是夜莺研发人员用的配置项，普通用户不需要关心，永远保持 release 即可。
Log # [Log] # stdout, stderr, file Output = &amp;quot;stdout&amp;quot; # log write dir Dir = &amp;quot;logs&amp;quot; # log level: DEBUG INFO WARNING ERROR Level = &amp;quot;DEBUG&amp;quot; # # rotate by time # KeepHours = 4 # # rotate by size # RotateNum = 3 # # unit: MB # RotateSize = 256 Output：日志输出方式，支持 stdout、stderr、file，只有在 file 模式下才会把日志输出到文件，才会用到下面的其他配置项 Dir：日志文件的存放目录 Level：日志级别，支持 DEBUG、INFO、WARNING、ERROR KeepHours：日志文件保留时间，单位小时。日志既可以按照时间切分，也可以按照大小切分，如果按照时间切分，就用这个配置项，每小时一个日志文件，如果按照大小切分，就用下面两个配置项 RotateNum：日志文件保留数量 RotateSize：日志文件大小，单位 MB HTTP # [HTTP] # http listening address Host = &amp;quot;0.</description></item></channel></rss>