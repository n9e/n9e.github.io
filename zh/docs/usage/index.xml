<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>快速体验 on</title><link>https://n9e.github.io/zh/docs/usage/</link><description>Recent content in 快速体验 on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Sun, 26 Jan 2025 11:15:54 +0800</lastBuildDate><atom:link href="https://n9e.github.io/zh/docs/usage/index.xml" rel="self" type="application/rss+xml"/><item><title>数据源</title><link>https://n9e.github.io/zh/docs/usage/datasource/</link><pubDate>Sun, 26 Jan 2025 11:15:54 +0800</pubDate><guid>https://n9e.github.io/zh/docs/usage/datasource/</guid><description>夜莺支持对接各类数据源，前期支持的数据源，比如 Prometheus、VictoriaMetrics、ElasticSearch 等，既支持查询看图，也支持告警。后面随着项目发展，夜莺定位为一个告警引擎，所以新对接的数据源，比如 ClickHouse、MySQL、Postgres 等，都是只支持告警，不支持查询看图。
不管是要查看数据源里的数据，还是对数据源里的数据进行告警，都需要先配置数据源。在 集成中心-数据源 中添加数据源，选择对应的数据源类型，填写数据源的地址、用户名、密码等信息，点击保存即可。
配置数据源时，除了要填写数据源的连接地址，另一个关键点是要选择关联的告警引擎，如果你的数据源是在边缘机房的，并且为边缘机房搭建了专属的 n9e-edge，那么就选择对应的 n9e-edge 作为关联的告警引擎。
数据源配置中，表单各项基本都对应有 tooltip（就是各个 form 表单旁边的小问号 icon，鼠标放上去可以看到用法提示），这里就不再赘述了。
配置完了数据源之后，可以到即时查询页面查询一下时序库的数据，如果能查到数据，则表明数据源的配置是 OK 的。
常见问题 # 1. 夜莺的配置文件 config.toml 中已经配置了数据源的 writer 地址，是否还需要在页面上重复配置？
是的。config.toml 中的 writer 地址，是用于数据转发链路，而页面上的数据源配置，是用于查询和告警的。两者是不同的概念。另外，writer 地址应该是一个 remote write 地址，而页面上的数据源配置通常是数据源的基准地址。另外，很多用户也没有使用夜莺转发监控指标，所以也就没有配置 config.toml 中的 writer 地址，仅配置了页面上的数据源。
2. 我想采用边缘模式对边缘机房的时序库做告警，但是中心端的 n9e 无法连通边缘的时序库，这种情况还能用夜莺做统一告警吗？
可以。这类边缘时序库，仍然需要在页面上添加，添加的时候选择「保存」而非选择「测试并保存」，这样一来，中心端的夜莺就不会校验连通性，可以直接保存成功。同时，数据源配置的时候，要配置上时序库内网地址，告警引擎选择和时序库能连通的 n9e-edge 告警引擎，届时 n9e-edge 会使用时序库内网地址进行查询和告警。
这种情况的边缘时序库，仍然可以告警，但是在夜莺的页面上就没法查询其数据了。因为夜莺的页面查询数据是通过中心端的 n9e 进行的，而中心端的 n9e 无法连通边缘时序库，所以无法查询。</description></item><item><title>即时查询</title><link>https://n9e.github.io/zh/docs/usage/ad-hoc/</link><pubDate>Sun, 26 Jan 2025 11:23:54 +0800</pubDate><guid>https://n9e.github.io/zh/docs/usage/ad-hoc/</guid><description>夜莺支持 Ad-hoc 查询，可以在界面上直接查询数据源的数据。菜单入口在 数据查询 下面，选择 指标 可以查询指标数据，选择 日志 可以查询日志数据。
指标查询 # 下面是一个指标查询样例：
这个页面和 Prometheus 的 graph 页面类似，支持查询时序指标数据。当然也做了一些增强，增加了内置指标、历史记录等等一些能力。上图中是一个 range vector，且使用的 Table 视图，此时夜莺会多做一步，计算各个数据的时间差，就是最右侧那个 +15，方便我们排查是否有数据丢失的情况，比如大都是规律的时间差，和采集频率一致，但是突然发现有两个时间差比较大，是好几倍的采集频率，那就表示有数据采集或传输失败了。
经常被新手询问的问题是，这个页面一进来为啥看不到任何数据。这是符合预期的，需要先输入 Promql 进行查询，然后才能看到数据。而非是说一进来这个页面就可以看到数据。Promql 是使用 Prometheus、Nightingale 的前置知识，建议先学习 Promql 的基础知识，资料参考：《Promql系列教程》
如果使用的采集器是 Categraf，可以查询 cpu_usage_active 这个指标，如果能查到，说明数据源配置是 OK 的。如果使用的采集器是 Node-Exporter，那可以查询 node_load1 这个指标，如果能查到，说明数据源配置是 OK 的。
日志查询 # 日志查询主要是支持的 ElasticSearch 数据源，配置 ElasticSearch 数据源的时候，有个版本字段很多人会有困惑，如果你是 6.x 版本的 ElasticSearch，那么就选择 6.0+ 版本，如果是 7.x 版本的 ElasticSearch，就选择 7.0+ 版本，如果是更高版本，也直接选择 7.0+ 版本，如果遇到不兼容的情况，提 issues 反馈即可。
配置完了数据源之后，可以在 数据查询-日志 页面进行查询，下面是一个日志查询样例：
和 Kibana 的日志查询页面很像，夜莺这里既可以支持按照索引模式查询，也可以不创建索引模式，直接查询索引（支持通配符），不过直接查询索引不是一个好的实践，后面可能会下掉这个功能。另外查询语法支持 KQL 和 Lucene（即 query string）两种，对于 ElasticSearch 的玩家而言，这些概念都不陌生，这里就不赘述了。</description></item><item><title>指标告警</title><link>https://n9e.github.io/zh/docs/usage/metric-alerting/</link><pubDate>Sun, 26 Jan 2025 11:45:54 +0800</pubDate><guid>https://n9e.github.io/zh/docs/usage/metric-alerting/</guid><description>夜莺监控（Nightingale）把告警分成告警+通知两个部分，告警指的是通过规则，周期性判定，最终产生告警事件，通知指的是告警事件的后续 Pipeline 和通知流程。本章节先介绍告警部分，最终能产生告警事件咱就算成功。
告警原理 # 夜莺支持两个告警模式，普通模式和高级模式（高级模式暂未开源，后面也计划开源）：
普通模式：在 Promql 中配置告警阈值，查询条件 和 阈值设置 在一起，没有特殊需求的话就使用普通模式即可，这个模式就和 Prometheus 的告警逻辑是一样的，性能比较好。不过告警恢复时要想拿到恢复时的值稍微麻烦点 高级模式：查询条件 和 阈值设置 分开，如果有多个查询条件需要做加减乘除计算，可以使用高级模式，在告警事件的现场值中会将每个查询条件的值展示出来，在告警恢复时也可以轻松拿到恢复时的值 普通模式的原理 # 普通模式下，夜莺会根据用户配置的执行频率，周期性查询数据源，查询条件就是用户配置的 Promql，查询方式是 instant query，即调用的数据源的 /api/v1/query 接口，查到几条数据就生成几条告警事件。比如 Promql 是 cpu_usage_active &amp;gt; 80，夜莺拿着这个 Promql 去查询时序库，时序库返回的结果肯定是 CPU 利用率大于 80% 的那些数据点，都是触发了阈值的数据点，所以夜莺应该生成告警事件。
如果用户在告警规则里配置了大于 0 的 持续时长，此时就会更复杂一些，夜莺会在持续时长内按照执行频率多次执行查询，每次都查到某个数据才生成告警；如果 持续时长 置为 0，表示只要有一次查询到数据，就生成告警。
如果之前生成了告警事件，后来再次查询时发现没有数据了，此时就会生成恢复事件，毕竟查不到数据了嘛，就说明时序库里没有数据达到阈值条件了，故而时序库不再返回任何数据。针对告警恢复，还有一个高级配置叫 留观时长，表示在恢复事件生成后，夜莺会继续观察一段时间，如果在留观时长内又查询到数据了，就不会生成恢复事件（继续维持告警状态）；如果留观时长内每次都没有查询到数据了，才会最终生成恢复事件。
从上文分析来看，告警恢复时，时序库不返回任何数据，所以夜莺无法拿到恢复时的值，这也是很多用户在使用普通模式时的一个痛点。夜莺为此设计了一个方式来解决这个问题，具体可以参考这篇文章《告警恢复时如何拿到恢复时的值？》。
高级模式的原理 # 高级模式下，阈值条件不放到 Promql 里，Promql 中只写过滤条件，比如 Promql：
cpu_usage_active{cpu=&amp;quot;cpu-total&amp;quot;} 这样一来，夜莺拿着这个 Promql 去查询时序库，时序库每次都是返回 CPU 利用率的所有数据点（性能稍差），然后夜莺再根据用户配置的 阈值判断 规则，对返回的数据在内存里进行判断，如下图所示：
高级模式和普通模式，关键区别是阈值判定是在 Promql 里进而交给时序库来做，还是在夜莺的内存里来做。高级模式下，如果触发了恢复事件，恢复事件里的 TriggerValue 会自动填充为恢复时刻的值，相比普通模式，获取恢复时的值更简单。</description></item><item><title>日志告警</title><link>https://n9e.github.io/zh/docs/usage/logs-alerting/</link><pubDate>Sun, 01 Jun 2025 16:11:07 +0800</pubDate><guid>https://n9e.github.io/zh/docs/usage/logs-alerting/</guid><description>夜莺监控（Nightingale）支持日志告警，可以针对 ElasticSearch、Loki、ClickHouse 等数据源中的日志数据配置告警规则，周期性查询数据源，当数据源中的数据满足告警阈值时，触发告警。日志告警和指标告警的区别主要是查询条件的写法不同。其他各个字段都是通用的，请一定先阅读指标告警的内容，这里不再赘述。
ElasticSearch 告警原理 # ElasticSearch 支持不同的查询语法，比如 DSL、KQL、Lucene、EQL、SQL 等，夜莺作为一个告警引擎，本质就是让用户配置查询语句，然后周期性查询数据源，对查到的数据做阈值判断，满足阈值条件就触发告警。
最先支持的查询语法是 Lucene，即 query_string 方式，查到数据之后做一个基本的统计，比如做一个计数，统计一下查到的日志行数，或者针对日志中的某个字段做统计，计算其平均、最大值、分位值等。然后把统计结果和用户配置的阈值进行对比，满足阈值条件就触发告警。
ElasticSearch 告警配置 # 首先是配置数据源，即当前告警规则要生效到哪些 ElasticSearch 数据源上，这个和指标告警本质是一样的逻辑。
🟢 数据源的类型那里，只有配置了对应类型的数据源，这里才会展示。即：如果你只配置了 Prometheus 类型的数据源，创建告警规则的时候，是看不到 ElasticSearch、TDEngine、ClickHouse 等其他类型的。
然后配置查询统计条件：
首先要选择索引，支持通配符，我上面配置的是 fc*，然后最关键的是过滤条件，我上面配置的是 message.status:&amp;gt;100，过滤 message.status 字段大于 100 的日志。这个过滤条件是 Lucene 的语法，和 Kibana 的查询语法是不一样的。日志必然有个日期字段，需要通过配置告知夜莺，哪个字段是日期字段，然后配置一个时间间隔，上图配置的是 5 分钟，夜莺就根据日期字段过滤最近 5 分钟的数据。
然后下面是统计分析方法，上例中选择的是 count，表示统计日志行数，并且没有任何 Group By 条件。
最后是阈值判断，即把上面 count 的结果，和阈值做比对，如果符合条件就产生告警事件。上例中阈值是 &amp;gt; 0 就告警，即 count 的结果大于 0 就告警。
稍等片刻，我们可以看到产生的告警事件：
ElasticSearch 过滤条件 # 过滤条件（即上例中的 message.status:&amp;gt;100）还有哪些写法？可以点击过滤条件旁边的那个小问号的图标，会在侧拉板中展示过滤条件的写法样例说明。一些典型的写法如下：
status:active 查询 status 字段包含 active 的记录 title:(quick OR brown) 查询 title 字段包含 quick 或 brown 的记录 author:&amp;quot;John Smith&amp;quot; 查询 author 字段包含完整短语 “John Smith” 的记录 count:[1 TO 5] 数据范围查询，闭区间，即包含 1 和 5 date:[2022-01-01 TO 2022-12-31] 日期范围查询 age:&amp;gt;=10 数值大小过滤，大于等于 10 注意，为了避免犯错，建议字段后面的冒号:前后都不要加空格。另外，不同的条件之间可以使用 AND、OR 连接，比如 status:active AND age:&amp;gt;=10。更多写法请参考 ElasticSearch 的官方文档。</description></item><item><title>通知规则</title><link>https://n9e.github.io/zh/docs/usage/notify-rules/</link><pubDate>Sun, 01 Jun 2025 18:12:58 +0800</pubDate><guid>https://n9e.github.io/zh/docs/usage/notify-rules/</guid><description>告警规则负责产生告警事件，通知规则负责把告警发送出去，不同的告警可以选择不同的通知媒介，比如高级别的告警打电话、发短信、发钉钉，低级别的告警发邮件等。再进行通知之前，还可以引入事件处理器，对告警事件做额外的处理，开源版本支持 Relabel、Callback、Event Update、Event Drop 四类处理器，不同的处理器可以组成一个 Pipeline，对告警事件做一些很灵活的处理。场景比如：
跟内部的 CMDB 打通，附加一些更丰富的信息到告警事件上 调用 DeepSeek 的接口，对告警事件做一些智能分析，然后把分析结果附加到告警事件上 把所有告警事件发送到自己的系统，相当于镜像一份，做后续的分析处理 一些特定的告警事件可以 Drop 掉，比如一些恢复事件不想发送通知 事件处理 Pipeline 是个相对高级的功能，普通用户用不上，本文主要介绍基础通知规则的配置。
设计初衷 # 老版本的夜莺没有通知规则的概念，是在告警规则里直接配置通知媒介和通知接收人，虽然直观，但是不够灵活，有如下问题：
告警规则中启用抑制之后，通知媒介仍然只能写死的问题。之前版本的告警规则中如果启用了抑制规则，通常意味着，不同的阈值想要使用不同的级别，进而使用不同的通知媒介发送告警，比如 Critical 级别的告警使用电话、短信，Info 级别的告警使用 Email。但是之前版本的告警规则中，通知媒介是写死的，无法做到不同的级别不同的媒介。 接入电话、短信等通知方式不方便。这次我们提供了通用的 HTTP、脚本发送方式，HTTP 的参数、Header、Body 都可以自定义，这样一来，可以更方便接入不同通知媒介了。 之前的通知方式和告警规则强耦合，不方便改动。新版本抽象了「通知规则」的概念，告警规则直接关联的是通知规则，通知规则中可以定义灵活的发送方式。每个小研发团队通常只需要定义一个通知规则，然后所有的告警规则都关联这个通知规则即可。后面改动通知规则也是非常方便的，改一个地方即可影响所有告警规则。 之前版本消息模板比较死板，每个类型的通知媒介只能固定使用一个消息模板。新版本支持消息模板自定义，而且每个通知媒介可以关联不同的消息模板，比如 DBA 团队和 大数据 团队都要使用钉钉机器人发告警，但是希望使用不同的消息模板，现在就可以做到了。 逻辑示意 # 新版本的告警事件发送逻辑，整体流程变成如下这个样子：
之前的版本，是在告警规则里直接配置通知媒介+告警接收人，耦合严重。新版本是在告警规则里关联通知规则，具体如何发送是在通知规则里定义的，这样一来，告警规则和通知规则解耦，多个告警规则可以关联一个通知规则，如果想要改动通知方式，只需要改动通知规则即可。
配置说明 # 通知规则可以支持不同的通知媒介，而且可以定义不同的媒介适用的范围，比如电话这个通知媒介，只适用于 Critical 的告警，而 Email 则适用于 Critical、Warning、Info 所有告警。下面是一个通知规则配置样例：
对于通知媒介，我们会内置一些，方便大家开箱即用：
打开通知媒介的配置，其中有个「变量配置」不太好理解。我说个场景：比如 DBA 团队和 BigData 团队都想使用企微这个通知媒介发告警，但是他们想使用不同的企微机器人，即 Webhook 地址基本相同，但是 URL 参数中的 Key 不同（不同的 Key 代表不同的机器人）。此时应该怎么做？
在夜莺的设计里，不希望创建两个不同的通知媒介。还是希望只有企微一个通知媒介，但是这个通知媒介支持传参，DBA 同学在配置告警通知规则的时候，选择企微这个通知媒介的同时，要填写自己的机器人的 Key，BigData 同学也是一样，也是配置企微通知媒介 + BigData 的企微机器人 Key。这样一来，一个通知媒介就可以支持多个机器人了。</description></item><item><title>仪表盘</title><link>https://n9e.github.io/zh/docs/usage/dashboard/</link><pubDate>Sun, 01 Jun 2025 19:03:43 +0800</pubDate><guid>https://n9e.github.io/zh/docs/usage/dashboard/</guid><description>夜莺监控虽然侧重点是告警，但是也支持仪表盘功能，虽然没有 Grafana 道行深，但是常见的图表类型都支持，可以满足日常使用。
快速导入 # 之前整理过机器的仪表盘，您可以直接导入使用，快速看到效果。导入的方式：
不同的采集器采集的监控指标名字和标签各异，所以需要分别制作仪表盘。如果你使用的是 Categraf，可以导入如下两个仪表盘：
机器概览数据：categraf-overview.json 机器详细数据：categraf-detail.json 如果你使用的是 Node Exporter，可以导入如下仪表盘：
Node 关键指标：exporter-detail.json 实际上，这几个仪表盘都可以在夜莺的菜单 集成中心-模板中心-搜索 Linux 找到：
Categraf 概览页面的仪表盘样例：
Categraf 机器详细数据的仪表盘样例：
模板中心已经内置了很多组件的仪表盘，但是质量参差不齐，回头腾出手来我们会挨个再整理一遍，力求开箱即用。不过组件实在是太多，人手有限，欢迎广大社区用户一起参与整理贡献，将您整理好的仪表盘提交到 Github 夜莺仓库的 integrations 目录下面的各个组件下的 dashboards 目录下，通过 PR 提交即可。
集成 Grafana # 你也可以继续使用 Grafana 看图，毕竟各有所长，组合使用更佳。也可以通过夜莺菜单 集成中心-系统集成，直接把 Grafana 通过 iframe 的方式嵌入夜莺，不过 Grafana 默认不支持被别的系统嵌入，需要修改一些配置，具体要修改的内容如下：
1、启用 embedding
在 Grafana 配置文件中找到 allow_embedding 的配置项，设置为 true。
2、启用 anonymous
找到 auth.anonymous 配置段，把 enabled 设置为 true，org_role 设置为 Viewer，org_name 根据你自己的环境配置即可。
3、对于 HTTPS 的 Grafana</description></item></channel></rss>